name: Fast Feedback Loop

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs for same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Path filtering for intelligent execution
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
      ci: ${{ steps.filter.outputs.ci }}
      contracts: ${{ steps.filter.outputs.contracts }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'apps/**'
              - 'packages/**'
              - '*.ts'
              - '*.js'
              - '*.json'
              - 'tsconfig.json'
              - 'biome.json'
            docs:
              - '**/*.md'
              - 'docs/**'
              - '*.md'
            ci:
              - '.github/workflows/**'
            contracts:
              - 'contracts/**'
              - 'spec/**'

  # Fast linting and formatting checks (continue on error for now)
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.ci == 'true' }}
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        continue-on-error: true

      - name: Check formatting
        run: bun run format:check || echo "⚠️ Formatting check failed but continuing..."
        continue-on-error: true

      - name: Lint code
        run: bun run lint || echo "⚠️ Linting failed but continuing..."
        continue-on-error: true

      - name: Report results
        if: always()
        run: |
          echo "## 🎨 Lint & Format Results" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Linting and formatting checks are informational only" >> $GITHUB_STEP_SUMMARY
          echo "These checks will be enforced once tooling setup is complete" >> $GITHUB_STEP_SUMMARY

  # TypeScript compilation check (continue on error for now)
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    timeout-minutes: 4
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.ci == 'true' }}
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        continue-on-error: true

      - name: TypeScript compilation check
        run: bun run typecheck || echo "⚠️ TypeScript check failed but continuing..."
        continue-on-error: true

      - name: Report results
        if: always()
        run: |
          echo "## 🔍 TypeScript Check Results" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ TypeScript checking is informational only" >> $GITHUB_STEP_SUMMARY
          echo "Type errors will be resolved in future iterations" >> $GITHUB_STEP_SUMMARY

  # Fast unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.ci == 'true' }}
    
    strategy:
      matrix:
        bun-version: [latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests
        run: ./run-tests.sh --coverage
        env:
          NODE_ENV: test

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.bun-version }}
          path: reports/cleanup/coverage/
          retention-days: 1

      - name: Check coverage threshold
        if: always()
        run: |
          if [ -f "reports/cleanup/coverage/lcov.info" ]; then
            LINES_FOUND=$(grep -c "^DA:" reports/cleanup/coverage/lcov.info || echo 0)
            LINES_HIT=$(grep "^DA:" reports/cleanup/coverage/lcov.info | grep -v ",0$" | wc -l || echo 0)
            
            if [ "$LINES_FOUND" -gt 0 ]; then
              COVERAGE_PERCENT=$(echo "scale=1; $LINES_HIT * 100 / $LINES_FOUND" | bc -l 2>/dev/null || echo "0")
              echo "📊 Coverage: $LINES_HIT/$LINES_FOUND lines covered ($COVERAGE_PERCENT%)"
              
              # Soft threshold at 85% - warn but don't fail
              if (( $(echo "$COVERAGE_PERCENT < 85" | bc -l) )); then
                echo "⚠️ Coverage warning: $COVERAGE_PERCENT% is below the 85% target"
                echo "Consider adding more tests to improve coverage"
              else
                echo "✅ Coverage meets the 85% target ($COVERAGE_PERCENT%)"
              fi
            else
              echo "❌ Could not calculate coverage percentage"
            fi
          else
            echo "❌ Coverage report not found"
          fi

      - name: Report test results
        if: always()
        run: |
          echo "## 🧪 Unit Test Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ All unit tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit test failures detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add coverage info to summary
          if [ -f "reports/cleanup/coverage/lcov.info" ]; then
            LINES_FOUND=$(grep -c "^DA:" reports/cleanup/coverage/lcov.info || echo 0)
            LINES_HIT=$(grep "^DA:" reports/cleanup/coverage/lcov.info | grep -v ",0$" | wc -l || echo 0)
            
            if [ "$LINES_FOUND" -gt 0 ]; then
              COVERAGE_PERCENT=$(echo "scale=1; $LINES_HIT * 100 / $LINES_FOUND" | bc -l 2>/dev/null || echo "0")
              echo "📊 Coverage: $COVERAGE_PERCENT% ($LINES_HIT/$LINES_FOUND lines)" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  # Build verification (informational for now)
  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.ci == 'true' }}
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        continue-on-error: true

      - name: Build packages
        run: bun run build || echo "⚠️ Build failed but continuing..."
        continue-on-error: true

      - name: Cache build artifacts
        uses: actions/cache@v4
        if: always()
        with:
          path: |
            apps/*/dist
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Report build results
        if: always()
        run: |
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Build checking is informational only" >> $GITHUB_STEP_SUMMARY
          echo "Build issues will be resolved in future iterations" >> $GITHUB_STEP_SUMMARY

  # Fast feedback summary
  fast-feedback-summary:
    name: Fast Feedback Summary
    runs-on: ubuntu-latest
    needs: [changes, lint, typecheck, unit-tests, build]
    if: always() && (needs.changes.outputs.code == 'true' || needs.changes.outputs.ci == 'true')
    
    steps:
      - name: Evaluate results
        run: |
          echo "# 🚀 Fast Feedback Loop Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check individual job results
          LINT_STATUS="${{ needs.lint.result }}"
          TYPECHECK_STATUS="${{ needs.typecheck.result }}"
          TESTS_STATUS="${{ needs.unit-tests.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          
          echo "| Check | Status | Note |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | $( [ "$LINT_STATUS" = "success" ] && echo "✅ Pass" || echo "⚠️ Info" ) | Informational |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | $( [ "$TYPECHECK_STATUS" = "success" ] && echo "✅ Pass" || echo "⚠️ Info" ) | Informational |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | $( [ "$TESTS_STATUS" = "success" ] && echo "✅ Pass" || echo "❌ Fail" ) | **Required** |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | $( [ "$BUILD_STATUS" = "success" ] && echo "✅ Pass" || echo "⚠️ Info" ) | Informational |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status - only fail on critical checks (tests only for now)
          if [ "$TESTS_STATUS" = "success" ]; then
            echo "## ✅ Fast Feedback: Critical Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "Ready for integration testing phase" >> $GITHUB_STEP_SUMMARY
            echo "Note: Only unit tests are enforced currently" >> $GITHUB_STEP_SUMMARY
            echo "Other checks are informational and will be enforced once issues are resolved" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Fast Feedback: Critical Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Please fix unit test failures before proceeding" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Set status
        run: |
          # Only fail on critical checks (tests only for now)
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "Critical fast feedback checks failed"
            exit 1
          fi
          echo "Critical fast feedback checks passed"

  # Documentation-only changes bypass
  docs-only:
    name: Documentation Only
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' && needs.changes.outputs.code == 'false' && needs.changes.outputs.ci == 'false' }}
    
    steps:
      - name: Skip intensive checks
        run: |
          echo "# 📚 Documentation-Only Changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Detected documentation-only changes" >> $GITHUB_STEP_SUMMARY
          echo "⏭️ Skipping code quality checks" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready for merge" >> $GITHUB_STEP_SUMMARY