name: Docker Compose E2E Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/cli/**'
      - 'packages/shared/**' 
      - 'tests/e2e-docker-compose/**'
      - '.github/workflows/e2e-docker-compose.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/cli/**'
      - 'packages/shared/**'
      - 'tests/e2e-docker-compose/**'
      - '.github/workflows/e2e-docker-compose.yml'
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  
jobs:
  e2e-docker-compose:
    name: Docker Compose E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Cache Bun dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          node_modules
          */node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build packages
      run: |
        bun run build:shared
        bun run build:cli
        
    - name: Build standalone CLI
      run: bun run build:standalone
      
    - name: Verify CLI build
      run: |
        ls -la arbiter-cli
        ./arbiter-cli --version
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure Docker daemon
      run: |
        # Optimize Docker for CI
        sudo systemctl stop docker
        sudo dockerd --data-root /tmp/docker --max-concurrent-downloads 3 --max-concurrent-uploads 3 &
        sleep 10
        
    - name: Verify Docker setup
      run: |
        docker version
        docker compose version
        docker info --format "{{.Name}}: {{.ServerVersion}}"
        
    - name: Free up disk space
      run: |
        # Remove unnecessary packages to free up disk space
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        df -h
        
    - name: Run E2E tests
      id: tests
      run: |
        cd tests/e2e-docker-compose
        
        # Set CI environment variables
        export CI=true
        export NODE_ENV=test
        
        # Run dependency check
        node check-dependencies.js
        
        # Run tests with timeout and verbose output
        timeout 1200 ./run-e2e-tests.sh --verbose
      env:
        DEBUG: ${{ github.event.inputs.debug == 'true' && '1' || '0' }}
        
    - name: Capture Docker logs on failure
      if: failure() && steps.tests.conclusion == 'failure'
      run: |
        cd tests/e2e-docker-compose
        
        # Create logs directory
        mkdir -p logs
        
        # Capture container logs if compose file exists
        if [ -f temp/compose/docker-compose.yml ]; then
          echo "=== Docker Compose Services ===" > logs/docker-logs.txt
          docker compose -f temp/compose/docker-compose.yml ps >> logs/docker-logs.txt 2>&1 || true
          
          echo -e "\n=== Service Logs ===" >> logs/docker-logs.txt
          docker compose -f temp/compose/docker-compose.yml logs >> logs/docker-logs.txt 2>&1 || true
        fi
        
        # Capture system Docker info
        echo -e "\n=== Docker System Info ===" > logs/docker-system.txt
        docker system df >> logs/docker-system.txt 2>&1 || true
        docker system events --since=10m --until=now >> logs/docker-system.txt 2>&1 || true
        
        # List all containers (including stopped)
        echo -e "\n=== All Containers ===" >> logs/docker-system.txt
        docker ps -a >> logs/docker-system.txt 2>&1 || true
        
        # Network information
        echo -e "\n=== Networks ===" >> logs/docker-system.txt
        docker network ls >> logs/docker-system.txt 2>&1 || true
        
        # Volume information
        echo -e "\n=== Volumes ===" >> logs/docker-system.txt
        docker volume ls >> logs/docker-system.txt 2>&1 || true
        
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-artifacts-${{ github.run_id }}
        path: |
          tests/e2e-docker-compose/logs/
          tests/e2e-docker-compose/temp/
        retention-days: 3
        
    - name: Upload Docker logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: docker-logs-${{ github.run_id }}
        path: |
          tests/e2e-docker-compose/logs/docker-*.txt
        retention-days: 3
        
    - name: Cleanup Docker resources
      if: always()
      run: |
        cd tests/e2e-docker-compose
        
        # Cleanup test resources
        if [ -f temp/compose/docker-compose.yml ]; then
          docker compose -f temp/compose/docker-compose.yml down --volumes --remove-orphans --timeout 10 || true
        fi
        
        # Remove test containers
        docker ps -a --filter "name=e2e-basic-stack" -q | xargs -r docker rm -f || true
        
        # Remove test networks
        docker network ls --filter "name=e2e-basic-stack" -q | xargs -r docker network rm || true
        
        # Remove test volumes  
        docker volume ls --filter "name=e2e-basic-stack" -q | xargs -r docker volume rm || true
        
        # General cleanup
        docker system prune -f --volumes || true
        
    - name: Report test results
      if: always()
      run: |
        if [ "${{ steps.tests.outcome }}" == "success" ]; then
          echo "✅ All Docker Compose E2E tests passed!"
        else
          echo "❌ Docker Compose E2E tests failed"
          echo "Check the uploaded artifacts for detailed logs"
          exit 1
        fi
        
  # Parallel job for different scenarios (optional)  
  e2e-scenarios:
    name: Test Different Scenarios
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.debug == 'true'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - minimal
          - complex
          - networking
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      
    - name: Install and build
      run: |
        bun install --frozen-lockfile
        bun run build:standalone
        
    - name: Run scenario tests
      run: |
        cd tests/e2e-docker-compose
        echo "Running scenario: ${{ matrix.scenario }}"
        # Add scenario-specific test commands here
        node check-dependencies.js
        
        # For now, just run the main test suite
        # In the future, different scenarios could use different CUE specs
        timeout 900 ./run-e2e-tests.sh