name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: "Version bump type"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
        default: patch
      prerelease-identifier:
        description: "Pre-release identifier (alpha, beta, rc)"
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
        default: beta
      custom-version:
        description: "Custom version (overrides version-type)"
        required: false
        type: string
      changelog-entry:
        description: "Changelog entry for this version"
        required: false
        type: string

env:
  NODE_ENV: development

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      target-version: ${{ steps.calculate-version.outputs.target-version }}
      changelog-entry: ${{ steps.prepare-changelog.outputs.changelog-entry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Calculate target version
        id: calculate-version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          if [ -n "${{ github.event.inputs.custom-version }}" ]; then
            TARGET_VERSION="${{ github.event.inputs.custom-version }}"
            echo "Using custom version: $TARGET_VERSION"
          else
            VERSION_TYPE="${{ github.event.inputs.version-type }}"

            # Split version into parts
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

            # Remove any pre-release suffix from patch
            patch=$(echo "$patch" | cut -d'-' -f1)

            case "$VERSION_TYPE" in
              "major")
                TARGET_VERSION="$((major + 1)).0.0"
                ;;
              "minor")
                TARGET_VERSION="$major.$((minor + 1)).0"
                ;;
              "patch")
                TARGET_VERSION="$major.$minor.$((patch + 1))"
                ;;
              "prerelease")
                IDENTIFIER="${{ github.event.inputs.prerelease-identifier }}"
                if [[ "$CURRENT_VERSION" =~ -([a-z]+)\.?([0-9]+)?$ ]]; then
                  CURRENT_ID="${BASH_REMATCH[1]}"
                  CURRENT_NUM="${BASH_REMATCH[2]:-0}"

                  if [ "$CURRENT_ID" = "$IDENTIFIER" ]; then
                    TARGET_VERSION="$major.$minor.$patch-$IDENTIFIER.$((CURRENT_NUM + 1))"
                  else
                    TARGET_VERSION="$major.$minor.$patch-$IDENTIFIER.1"
                  fi
                else
                  TARGET_VERSION="$major.$minor.$patch-$IDENTIFIER.1"
                fi
                ;;
            esac
          fi

          if [[ ! "$TARGET_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
            echo "Error: Invalid version format: $TARGET_VERSION"
            exit 1
          fi

          echo "target-version=$TARGET_VERSION" >> "$GITHUB_OUTPUT"
          echo "Target version: $TARGET_VERSION"

      - name: Prepare changelog entry
        id: prepare-changelog
        run: |
          TARGET_VERSION="${{ steps.calculate-version.outputs.target-version }}"
          CHANGELOG_INPUT="${{ github.event.inputs.changelog-entry }}"

          if [ -n "$CHANGELOG_INPUT" ]; then
            CHANGELOG_ENTRY="$CHANGELOG_INPUT"
          else
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

            if [ -n "$LAST_TAG" ]; then
              COMMITS=$(git log --pretty=format:"* %s" "$LAST_TAG..HEAD" | head -10)
            else
              COMMITS=$(git log --pretty=format:"* %s" --max-count=10)
            fi

            CHANGELOG_ENTRY="### Version $TARGET_VERSION

**Changes:**
$COMMITS

**Full Changelog**: https://github.com/${{ github.repository }}/compare/v$CURRENT_VERSION...v$TARGET_VERSION"
          fi

          {
            echo "changelog-entry<<EOF"
            echo "$CHANGELOG_ENTRY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  version-bump:
    name: Bump Version
    runs-on: ubuntu-latest
    needs: validate-inputs
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update versions
        id: update-versions
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target-version }}"
          echo "Target version: $TARGET_VERSION"

          bun scripts/sync-versions.ts sync "$TARGET_VERSION"
          bun run changelog "$TARGET_VERSION"

          git status --short

      - name: Commit changes
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target-version }}"

          git add package.json bun.lock CHANGELOG.md packages apps

          git commit -m "chore: release v$TARGET_VERSION" || echo "No changes to commit"

          git tag -a "v$TARGET_VERSION" -m "Release v$TARGET_VERSION

${{ needs.validate-inputs.outputs.changelog-entry }}"

      - name: Push changes
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target-version }}"

          git push origin main
          git push origin "v$TARGET_VERSION"

      - name: Create summary
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target-version }}"

          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          # ðŸŽ‰ Version Bump Completed

          **New Version:** \\`v$TARGET_VERSION\\`
          **Bump Type:** \\`${{ github.event.inputs.version-type }}\\`
          **Tag Created:** \\`v$TARGET_VERSION\\`

          ## Changes Made
          - Updated all package.json files
          - Updated CHANGELOG.md
          - Created git tag
          - Pushed to main branch

          ## Next Steps
          The release workflow will be triggered automatically by the new tag.

          **Release URL:** https://github.com/${{ github.repository }}/releases/tag/v$TARGET_VERSION
          EOF

  trigger-release:
    name: Trigger Release Workflow
    runs-on: ubuntu-latest
    needs:
      - validate-inputs
      - version-bump
    steps:
      - name: Notify workflow trigger
        run: |
          TARGET_VERSION="${{ needs.validate-inputs.outputs.target-version }}"
          echo "ðŸš€ Version v$TARGET_VERSION has been tagged and pushed."
          echo "Monitor the release workflow at:"
          echo "https://github.com/${{ github.repository }}/actions/workflows/release.yml"
          echo ""
          echo "Release will be available at:"
          echo "https://github.com/${{ github.repository }}/releases/tag/v$TARGET_VERSION"
