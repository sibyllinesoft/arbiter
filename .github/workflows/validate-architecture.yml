name: Architecture Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.cue'
      - 'schema/**'
      - 'config/**'
      - '.github/workflows/validate-architecture.yml'
  
  push:
    branches: [ main ]
    paths:
      - '**/*.cue'
      - 'schema/**'
      - 'config/**'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      schema-path:
        description: 'Path to schema file'
        default: 'schema.cue'
        type: string
      config-path:
        description: 'Path to config file'  
        default: 'config.cue'
        type: string
      fail-on:
        description: 'Validation level to fail on'
        default: 'error'
        type: choice
        options:
          - error
          - warning
          - info

jobs:
  validate-architecture:
    name: Validate Architecture
    runs-on: ubuntu-latest
    
    # Don't run on draft PRs
    if: github.event.pull_request.draft != true
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Get full history for better context in error messages
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Start Arbiter server (in real usage, this would be a service or external server)
      - name: Start Arbiter Server
        run: |
          # In production, you would either:
          # 1. Use a hosted Arbiter service
          # 2. Start Arbiter as a service in docker-compose
          # 3. Deploy Arbiter to a staging environment
          
          # For this example, we'll start a local server
          npx @arbiter/cli server --port 3000 --host 0.0.0.0 &
          
          # Wait for server to be ready
          timeout 30s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          
          echo "Arbiter server started at http://localhost:3000"
        
      - name: Validate Architecture
        uses: ./.github/actions/arbiter-validate
        with:
          schema-path: ${{ github.event.inputs.schema-path || 'examples/api-schema.cue' }}
          config-path: ${{ github.event.inputs.config-path || 'examples/api-config.cue' }}
          arbiter-url: 'http://localhost:3000'
          fail-on: ${{ github.event.inputs.fail-on || 'error' }}
          timeout: '60'
          output-format: 'github-actions'
          export-formats: 'openapi,typescript'
          working-directory: '.'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Export Artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if validation failed
        with:
          name: architecture-exports-${{ github.sha }}
          path: |
            arbiter-export-*.yaml
            arbiter-export-*.ts
            arbiter-export-*.json
          retention-days: 30
      
      - name: Comment on PR with Artifacts
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find export artifacts
            const exportFiles = [];
            try {
              const files = fs.readdirSync('.');
              for (const file of files) {
                if (file.startsWith('arbiter-export-')) {
                  exportFiles.push(file);
                }
              }
            } catch (error) {
              console.log('No export artifacts found');
            }
            
            if (exportFiles.length > 0) {
              const artifactsList = exportFiles.map(f => `- \`${f}\``).join('\n');
              const comment = `### ðŸ“¤ Architecture Export Artifacts
            
            The following artifacts were generated from your architecture:
            
            ${artifactsList}
            
            You can download these artifacts from the Actions tab to use in your development workflow.
            
            ---
            *Generated by Arbiter Architecture Validation*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Example of matrix validation for multiple environments
  validate-multiple-environments:
    name: Validate Multiple Environments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      fail-fast: false
      matrix:
        environment: [development, staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Start Arbiter Server
        run: |
          npx @arbiter/cli server --port 3000 --host 0.0.0.0 &
          timeout 30s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
      
      - name: Validate ${{ matrix.environment }} Configuration
        uses: ./.github/actions/arbiter-validate
        with:
          schema-path: 'schema/api-schema.cue'
          config-path: 'config/${{ matrix.environment }}.cue'
          arbiter-url: 'http://localhost:3000'
          fail-on: 'error'
          timeout: '60'
          export-formats: 'kubernetes'  # Generate K8s manifests for each environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Environment Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.environment }}-manifests
          path: arbiter-export-*.yaml
          retention-days: 7