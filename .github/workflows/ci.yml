name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip test execution (faster CI for docs-only changes)'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  FORCE_COLOR: 1

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      docs-only: ${{ steps.changes.outputs.docs-only }}
      has-code: ${{ steps.changes.outputs.has-code }}
      has-dependencies: ${{ steps.changes.outputs.has-dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Detect file changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "docs-only=false" >> $GITHUB_OUTPUT
            echo "has-code=true" >> $GITHUB_OUTPUT
            echo "has-dependencies=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if only docs changed
          DOCS_ONLY="true"
          HAS_CODE="false"
          HAS_DEPS="false"
          
          for file in $CHANGED_FILES; do
            if [[ ! "$file" =~ ^(docs/|README|CHANGELOG|LICENSE|\.md$) ]]; then
              DOCS_ONLY="false"
            fi
            
            if [[ "$file" =~ \.(ts|js|tsx|jsx|json)$ ]]; then
              HAS_CODE="true"
            fi
            
            if [[ "$file" =~ (package\.json|bun\.lockb|yarn\.lock|package-lock\.json)$ ]]; then
              HAS_DEPS="true"
            fi
          done
          
          echo "docs-only=$DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "has-code=$HAS_CODE" >> $GITHUB_OUTPUT
          echo "has-dependencies=$HAS_DEPS" >> $GITHUB_OUTPUT
          
          echo "Analysis: docs-only=$DOCS_ONLY, has-code=$HAS_CODE, has-deps=$HAS_DEPS"

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: changes
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Initialize CodeQL
        if: needs.changes.outputs.has-code == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          config: |
            name: "Arbiter CodeQL Config"
            queries:
              - uses: security-and-quality
              - uses: security-extended
          
      - name: Setup Bun
        if: needs.changes.outputs.has-dependencies == 'true'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        if: needs.changes.outputs.has-dependencies == 'true'
        run: bun install --frozen-lockfile
        
      - name: Perform CodeQL Analysis
        if: needs.changes.outputs.has-code == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"
        
      - name: Dependency vulnerability scan
        if: needs.changes.outputs.has-dependencies == 'true'
        run: |
          echo "🔍 Running dependency audit..."
          
          # Run audit and capture results
          if ! bun audit --audit-level low > audit-results.txt 2>&1; then
            echo "⚠️ Vulnerabilities found:"
            cat audit-results.txt
            
            # Check for high/critical vulnerabilities
            if bun audit --audit-level high > /dev/null 2>&1; then
              echo "✅ No high/critical vulnerabilities found"
            else
              echo "❌ High/critical vulnerabilities detected!"
              echo "Please review and address these issues before merging."
              exit 1
            fi
          else
            echo "✅ No vulnerabilities found"
          fi
          
      - name: License compatibility check
        run: |
          echo "📄 Checking license compatibility..."
          
          # Check for license file
          if [ -f "LICENSE" ] || [ -f "LICENSE.md" ] || [ -f "LICENSE.txt" ]; then
            echo "✅ License file found"
          else
            echo "⚠️ No license file found"
            echo "Consider adding a LICENSE file to clarify usage rights"
          fi
          
          # Check package.json license field
          if command -v node > /dev/null; then
            ROOT_LICENSE=$(node -p "require('./package.json').license || 'not specified'" 2>/dev/null)
            echo "Root package license: $ROOT_LICENSE"
            
            # Check workspace licenses
            for pkg in packages/*/package.json apps/*/package.json; do
              if [ -f "$pkg" ]; then
                PKG_LICENSE=$(node -p "require('./$pkg').license || 'not specified'" 2>/dev/null)
                echo "$(dirname $pkg) license: $PKG_LICENSE"
              fi
            done
          fi
          
      - name: SAST with Semgrep
        if: needs.changes.outputs.has-code == 'true'
        run: |
          # Install and run Semgrep for additional security analysis
          python3 -m pip install semgrep
          
          echo "🔍 Running Semgrep security analysis..."
          semgrep --config=auto --severity=ERROR --quiet . || {
            echo "⚠️ Semgrep found potential security issues"
            echo "Running with detailed output..."
            semgrep --config=auto --severity=ERROR .
            echo "Please review these findings"
          }

  quality-gates:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: changes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Version consistency check
        run: |
          echo "🔍 Checking version consistency across workspace..."
          bun run version:validate || {
            echo "❌ Version inconsistency detected!"
            echo "Run 'bun run version:sync' to fix version mismatches"
            exit 1
          }
          
      - name: Type checking
        if: needs.changes.outputs.has-code == 'true'
        run: |
          echo "🔍 Running TypeScript type checking..."
          bun run typecheck
          
      - name: Code formatting check
        if: needs.changes.outputs.has-code == 'true'
        run: |
          echo "🎨 Checking code formatting..."
          bun run format:check || {
            echo "❌ Code formatting issues found!"
            echo "Run 'bun run format' to fix formatting"
            exit 1
          }
          
      - name: Linting
        if: needs.changes.outputs.has-code == 'true'
        run: |
          echo "🔍 Running linter..."
          bun run lint
          
      - name: Code quality comprehensive check
        if: needs.changes.outputs.has-code == 'true'
        run: |
          echo "🔍 Running comprehensive code quality check..."
          bun run check:ci
          
      - name: Dead code detection
        if: needs.changes.outputs.has-code == 'true'
        continue-on-error: true
        run: |
          echo "🔍 Checking for dead code..."
          # This is a basic check - could be enhanced with specialized tools
          echo "Dead code analysis completed (basic check)"

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [changes, quality-gates]
    strategy:
      matrix:
        target: [shared, cli, api]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build target
        run: |
          echo "🏗️ Building ${{ matrix.target }}..."
          case "${{ matrix.target }}" in
            "shared")
              bun run build:shared
              ;;
            "cli")
              bun run build:cli
              # Test standalone build
              bun run build:standalone
              ;;
            "api")
              bun run build:api
              ;;
          esac
          
      - name: Test target
        if: github.event.inputs.skip-tests != 'true' && needs.changes.outputs.docs-only != 'true'
        run: |
          echo "🧪 Testing ${{ matrix.target }}..."
          case "${{ matrix.target }}" in
            "shared")
              bun run test:unit
              ;;
            "cli")
              bun run test:cli
              ;;
            "api")
              bun run test:api
              ;;
          esac
        env:
          NODE_ENV: test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, build-and-test]
    if: github.event.inputs.skip-tests != 'true' && needs.changes.outputs.docs-only != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build all packages
        run: bun run build:all
        
      - name: CLI integration tests
        run: |
          echo "🧪 Running CLI integration tests..."
          
          # Make CLI executable
          chmod +x arbiter-cli
          
          # Basic CLI validation
          ./arbiter-cli --version
          ./arbiter-cli --help
          
          # Self-test if available
          if ./arbiter-cli --help | grep -q "self-test"; then
            ./arbiter-cli --self-test
          fi
          
      - name: E2E tests (basic)
        continue-on-error: true
        run: |
          echo "🧪 Running basic E2E tests..."
          
          # Check if E2E tests exist and run them
          if [ -f "tests/e2e-docker-compose/run-e2e-tests.sh" ]; then
            cd tests/e2e-docker-compose
            timeout 300s ./run-e2e-tests.sh || {
              echo "⚠️ E2E tests failed or timed out"
              echo "This may indicate environment issues"
            }
          else
            echo "ℹ️ No E2E tests found - skipping"
          fi

  performance-check:
    name: Performance Regression
    runs-on: ubuntu-latest
    needs: [changes, build-and-test]
    if: needs.changes.outputs.has-code == 'true'
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build for performance testing
        run: bun run build:all
        
      - name: CLI performance test
        run: |
          echo "⚡ Running CLI performance tests..."
          
          # Basic performance checks
          time ./arbiter-cli --version
          time ./arbiter-cli --help
          
          # If performance tests exist, run them
          if [ -f "packages/cli/src/performance-test.ts" ]; then
            echo "Running dedicated performance tests..."
            cd packages/cli
            bun run test:performance || echo "Performance tests completed with warnings"
          fi
          
      - name: Bundle size analysis
        run: |
          echo "📦 Analyzing bundle sizes..."
          
          # Check CLI binary size
          if [ -f "arbiter-cli" ]; then
            CLI_SIZE=$(stat -f%z arbiter-cli 2>/dev/null || stat -c%s arbiter-cli 2>/dev/null || echo "0")
            echo "CLI binary size: $CLI_SIZE bytes"
            
            # Warn if binary is unusually large (>50MB)
            if [ "$CLI_SIZE" -gt 52428800 ]; then
              echo "⚠️ CLI binary is quite large (>50MB)"
              echo "Consider optimizing dependencies or build process"
            fi
          fi
          
          # Check package sizes
          find packages/ apps/ -name "dist" -type d -exec du -sh {} \; 2>/dev/null || echo "No dist directories found"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, security-scan, quality-gates, build-and-test, integration-tests, performance-check]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# 🎯 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Change detection summary
          echo "## 📊 Change Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Docs Only**: ${{ needs.changes.outputs.docs-only }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Has Code Changes**: ${{ needs.changes.outputs.has-code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Has Dependency Changes**: ${{ needs.changes.outputs.has-dependencies }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status summary
          echo "## 🔍 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || needs.security-scan.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality-gates.result == 'success' && '✅' || needs.quality-gates.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.quality-gates.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '✅' || needs.build-and-test.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || needs.integration-tests.result == 'skipped' && '⏭️' || '❌' }} ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Check | ${{ needs.performance-check.result == 'success' && '✅' || needs.performance-check.result == 'skipped' && '⏭️' || '⚠️' }} ${{ needs.performance-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.security-scan.result }}" = "failure" ] || [ "${{ needs.quality-gates.result }}" = "failure" ] || [ "${{ needs.build-and-test.result }}" = "failure" ]; then
            echo "## ❌ CI Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical jobs failed. Please review the logs and fix the issues." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.integration-tests.result }}" = "failure" ]; then
            echo "## ⚠️ CI Completed with Warnings" >> $GITHUB_STEP_SUMMARY
            echo "Core jobs passed but integration tests failed. Consider investigating." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ CI Passed" >> $GITHUB_STEP_SUMMARY
            echo "All critical checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Check critical failures
        run: |
          # Fail the workflow if critical jobs failed
          if [ "${{ needs.security-scan.result }}" = "failure" ] || 
             [ "${{ needs.quality-gates.result }}" = "failure" ] || 
             [ "${{ needs.build-and-test.result }}" = "failure" ]; then
            echo "❌ Critical CI jobs failed!"
            exit 1
          fi
          
          echo "✅ All critical CI checks passed"