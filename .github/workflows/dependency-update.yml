name: Dependency Update

on:
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Type of updates to perform'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - all
        default: patch
      create-pr:
        description: 'Create pull request for updates'
        required: false
        type: boolean
        default: true

env:
  NODE_ENV: development

jobs:
  analyze-dependencies:
    name: Analyze Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-updates: ${{ steps.check.outputs.has-updates }}
      update-summary: ${{ steps.check.outputs.update-summary }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check for outdated dependencies
        id: check
        run: |
          echo "üîç Checking for outdated dependencies..."

          # Check for outdated packages
          UPDATE_TYPE="${{ github.event.inputs.update-type || 'patch' }}"

          # Create update summary
          echo "# Dependency Analysis" > update-summary.md
          echo "" >> update-summary.md
          echo "**Update Type**: $UPDATE_TYPE" >> update-summary.md
          echo "**Date**: $(date -u +%Y-%m-%d)" >> update-summary.md
          echo "" >> update-summary.md

          # Check root dependencies
          echo "## Root Package Dependencies" >> update-summary.md
          if command -v bun >/dev/null 2>&1; then
            # Use bun to check for updates (if available)
            echo "Checking with bun..." >> update-summary.md
          else
            echo "Bun not available for dependency checking" >> update-summary.md
          fi

          # Check workspace dependencies
          echo "" >> update-summary.md
          echo "## Workspace Dependencies" >> update-summary.md

          for pkg in packages/*/package.json apps/*/package.json; do
            if [ -f "$pkg" ]; then
              pkg_name=$(dirname "$pkg")
              echo "### $pkg_name" >> update-summary.md
              
              # Extract dependencies
              if command -v node >/dev/null 2>&1; then
                deps=$(node -p "
                  const pkg = require('./$pkg');
                  const deps = {...(pkg.dependencies || {}), ...(pkg.devDependencies || {})};
                  Object.keys(deps).length;
                " 2>/dev/null || echo "0")
                echo "- Dependencies: $deps" >> update-summary.md
              fi
            fi
          done

          # Check for security vulnerabilities
          echo "" >> update-summary.md
          echo "## Security Analysis" >> update-summary.md

          if bun audit --json > audit-results.json 2>/dev/null; then
            vuln_count=$(cat audit-results.json | grep -o '"severity"' | wc -l || echo "0")
            echo "- Vulnerabilities found: $vuln_count" >> update-summary.md
            
            if [ "$vuln_count" -gt 0 ]; then
              echo "has-updates=true" >> $GITHUB_OUTPUT
            else
              echo "has-updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "- Could not run security audit" >> update-summary.md
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

          # Save summary to output
          echo "update-summary<<EOF" >> $GITHUB_OUTPUT
          cat update-summary.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload analysis report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            update-summary.md
            audit-results.json
          retention-days: 30

  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    needs: analyze-dependencies
    if: needs.analyze-dependencies.outputs.has-updates == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Update vulnerable dependencies
        run: |
          echo "üîß Applying security updates..."

          # Try to fix vulnerabilities automatically
          if bun audit --fix 2>/dev/null; then
            echo "‚úÖ Security updates applied automatically"
          else
            echo "‚ö†Ô∏è Could not apply automatic security fixes"
            echo "Manual review may be required"
          fi

      - name: Test after security updates
        run: |
          echo "üß™ Testing after security updates..."

          # Reinstall and test
          bun install

          # Run basic build test
          if bun run build:all; then
            echo "‚úÖ Build successful after security updates"
          else
            echo "‚ùå Build failed after security updates"
            echo "Reverting changes..."
            git checkout -- .
            exit 1
          fi

          # Run basic tests if available
          if bun run test 2>/dev/null; then
            echo "‚úÖ Tests passed after security updates"
          else
            echo "‚ö†Ô∏è Tests failed or not available - proceeding with caution"
          fi

      - name: Commit security updates
        run: |
          if git diff --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
            exit 0
          fi

          git add .
          git commit -m "security: Update vulnerable dependencies

          - Applied automatic security fixes
          - Verified build and tests still pass
          - Generated by GitHub Actions

          Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

          echo "‚úÖ Security updates committed"

      - name: Create security update PR
        if: github.event.inputs.create-pr != 'false'
        run: |
          # Create a new branch for security updates
          BRANCH_NAME="security-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          # Create PR using GitHub CLI if available
          if command -v gh >/dev/null 2>&1; then
            gh pr create \
              --title "üîí Security: Update vulnerable dependencies" \
              --body "$(cat <<'EOF'
          ## Security Dependency Updates

          This PR contains automatic security updates for vulnerable dependencies.

          ### Changes
          - ‚úÖ Applied automatic security fixes via \`bun audit --fix\`
          - ‚úÖ Verified build continues to work
          - ‚úÖ Basic tests confirmed passing

          ### Testing
          - [ ] Review the specific package updates
          - [ ] Run full test suite
          - [ ] Verify no breaking changes in development
          - [ ] Check for any new deprecation warnings

          ### Security Impact
          This PR addresses security vulnerabilities found in dependencies. Review the changes carefully before merging.

          ---
          *ü§ñ Auto-generated by GitHub Actions*
          EOF
          )" \
              --head "$BRANCH_NAME" \
              --base main \
              --label "security,dependencies,automated"
              
            echo "‚úÖ Security update PR created"
          else
            echo "‚ö†Ô∏è GitHub CLI not available - please create PR manually"
            echo "Branch: $BRANCH_NAME"
          fi

  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.update-type != '' && github.event.inputs.update-type != 'security-only'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Update dependencies
        run: |
          echo "üîÑ Updating dependencies (${{ github.event.inputs.update-type }})..."

          UPDATE_TYPE="${{ github.event.inputs.update-type }}"

          case "$UPDATE_TYPE" in
            "patch")
              echo "Updating patch versions only..."
              # Add logic for patch updates
              ;;
            "minor")
              echo "Updating minor versions..."
              # Add logic for minor updates
              ;;
            "major")
              echo "Updating major versions (with caution)..."
              # Add logic for major updates
              ;;
            "all")
              echo "Updating all dependencies..."
              # Add logic for all updates
              ;;
          esac

          # For now, we'll do a conservative update
          echo "‚ÑπÔ∏è Conservative dependency update strategy"
          echo "Manual updates recommended for this workflow"

      - name: Test after updates
        run: |
          echo "üß™ Testing after dependency updates..."

          # Reinstall with new versions
          rm -rf node_modules packages/*/node_modules apps/*/node_modules
          bun install

          # Test build
          if ! bun run build:all; then
            echo "‚ùå Build failed after dependency updates"
            exit 1
          fi

          # Test packages
          if ! bun run test; then
            echo "‚ùå Tests failed after dependency updates"
            echo "Consider reverting problematic updates"
            exit 1
          fi

          echo "‚úÖ All tests passed after dependency updates"

  report:
    name: Dependency Report
    runs-on: ubuntu-latest
    needs: [analyze-dependencies, security-updates, dependency-updates]
    if: always()

    steps:
      - name: Download analysis
        uses: actions/download-artifact@v4
        with:
          name: dependency-analysis
          path: analysis/
        continue-on-error: true

      - name: Generate report
        run: |
          echo "# üîç Dependency Update Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Analysis results
          echo "## Analysis Results" >> $GITHUB_STEP_SUMMARY
          if [ -f "analysis/update-summary.md" ]; then
            cat analysis/update-summary.md >> $GITHUB_STEP_SUMMARY
          else
            echo "Analysis summary not available" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Job results
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Analysis | ${{ needs.analyze-dependencies.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.analyze-dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Updates | ${{ needs.security-updates.result == 'success' && '‚úÖ' || needs.security-updates.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} ${{ needs.security-updates.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Updates | ${{ needs.dependency-updates.result == 'success' && '‚úÖ' || needs.dependency-updates.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} ${{ needs.dependency-updates.result }} |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          # Next steps
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-updates.result }}" = "success" ]; then
            echo "- üîí Review and merge security update PR" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.dependency-updates.result }}" = "success" ]; then
            echo "- üì¶ Review dependency update changes" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- üß™ Run full test suite on updated dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- üìã Check for any breaking changes or deprecations" >> $GITHUB_STEP_SUMMARY
