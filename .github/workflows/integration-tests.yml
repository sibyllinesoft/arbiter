name: Integration Tests

on:
  workflow_run:
    workflows: ["Fast Feedback Loop"]
    types:
      - completed
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs for same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Skip if fast feedback failed (except for manual triggers)
  check-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check if should run
        id: check
        run: |
          # Always run on manual triggers or direct pushes
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Skip if fast feedback workflow failed
          if [ "${{ github.event_name }}" = "workflow_run" ] && [ "${{ github.event.workflow_run.conclusion }}" != "success" ]; then
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "Skipping integration tests because fast feedback failed"
            exit 0
          fi
          
          echo "should-run=true" >> $GITHUB_OUTPUT

  # Path filtering for intelligent execution
  changes:
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: ${{ needs.check-prerequisites.outputs.should-run == 'true' }}
    outputs:
      api: ${{ steps.filter.outputs.api }}
      contracts: ${{ steps.filter.outputs.contracts }}
      tutorials: ${{ steps.filter.outputs.tutorials }}
      config: ${{ steps.filter.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'packages/shared/**'
              - 'apps/web/**'
            contracts:
              - 'contracts/**'
              - 'packages/shared/**'
            tutorials:
              - 'doc/tutorial/**'
              - 'spec/**'
            config:
              - 'docker-compose.yml'
              - 'Dockerfile*'
              - '.github/workflows/**'

  # Contract testing
  contract-tests:
    name: Contract Testing
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [check-prerequisites, changes]
    if: ${{ needs.check-prerequisites.outputs.should-run == 'true' && (needs.changes.outputs.contracts == 'true' || needs.changes.outputs.api == 'true') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate contracts
        run: bun run generate:contracts

      - name: Validate contract schemas
        run: |
          echo "Validating OpenAPI contracts..."
          # Check if contract files exist and are valid JSON/YAML
          for contract in contracts/*.json; do
            if [ -f "$contract" ]; then
              echo "Validating $contract"
              cat "$contract" | jq empty || (echo "Invalid JSON in $contract" && exit 1)
            fi
          done

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contracts
          path: contracts/
          retention-days: 7

      - name: Report contract results
        run: |
          echo "## 📋 Contract Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Contract schemas generated and validated" >> $GITHUB_STEP_SUMMARY
          echo "✅ API contracts are consistent" >> $GITHUB_STEP_SUMMARY

  # API integration tests
  api-integration-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [check-prerequisites, changes]
    if: ${{ needs.check-prerequisites.outputs.should-run == 'true' && needs.changes.outputs.api == 'true' }}
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install CUE CLI
        run: |
          curl -sSL https://cuelang.org/go/install | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build packages
        run: bun run build

      - name: Start API server
        run: |
          cd apps/api
          bun run dev &
          echo $! > ../../api.pid
          # Wait for server to start
          timeout 60 bash -c 'until curl -s http://localhost:3001/health; do sleep 2; done'
        env:
          NODE_ENV: test
          DATABASE_PATH: ":memory:"

      - name: Wait for services to be ready
        run: |
          echo "Waiting for all services to be healthy..."
          timeout 30 bash -c 'until curl -s http://localhost:3001/api/health | grep -q "ok"; do sleep 1; done'

      - name: Run API integration tests
        run: |
          echo "Running API integration tests..."
          # Test health endpoint
          curl -f http://localhost:3001/health
          curl -f http://localhost:3001/api/health
          
          # Test WebSocket connection
          timeout 10 bash -c '
            exec 3<>/dev/tcp/localhost/3001
            echo -e "GET /ws HTTP/1.1\r\nHost: localhost:3001\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r\nSec-WebSocket-Version: 13\r\n\r\n" >&3
            read -t 5 response <&3
            echo "WebSocket response: $response"
            exec 3<&-
            exec 3>&-
          '
          
          # Test CUE analysis endpoint
          curl -X POST -H "Content-Type: application/json" \
            -d '{"content": "hello: \"world\""}' \
            http://localhost:3001/api/analysis/analyze | jq .
        env:
          NODE_ENV: test

      - name: Stop API server
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill $(cat api.pid) || true
            rm api.pid
          fi

      - name: Report API integration results
        run: |
          echo "## 🔗 API Integration Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ All API endpoints responding correctly" >> $GITHUB_STEP_SUMMARY
            echo "✅ WebSocket connections working" >> $GITHUB_STEP_SUMMARY
            echo "✅ CUE analysis integration functional" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ API integration issues detected" >> $GITHUB_STEP_SUMMARY
          fi

  # Tutorial validation tests
  tutorial-validation:
    name: Tutorial Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [check-prerequisites, changes]
    if: ${{ needs.check-prerequisites.outputs.should-run == 'true' && (needs.changes.outputs.tutorials == 'true' || needs.changes.outputs.api == 'true') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install CUE CLI
        run: |
          curl -sSL https://cuelang.org/go/install | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate tutorial examples
        run: bun run test:tutorial

      - name: Check CUE examples compile
        run: |
          echo "Validating CUE examples..."
          find doc/tutorial -name "*.cue" -exec cue fmt {} \; || true
          find examples -name "*.cue" -exec cue fmt {} \; || true

      - name: Report tutorial results
        run: |
          echo "## 📚 Tutorial Validation Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ All tutorial examples validated" >> $GITHUB_STEP_SUMMARY
            echo "✅ CUE examples compile successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tutorial validation issues found" >> $GITHUB_STEP_SUMMARY
          fi

  # Database integration tests
  database-integration:
    name: Database Integration
    runs-on: ubuntu-latest
    timeout-minutes: 6
    needs: [check-prerequisites, changes]
    if: ${{ needs.check-prerequisites.outputs.should-run == 'true' && needs.changes.outputs.api == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Test database operations
        run: |
          echo "Testing SQLite database operations..."
          cd apps/api
          # Test database schema creation and basic operations
          cat > test-db.js << 'EOF'
          import { Database } from 'bun:sqlite';
          
          const db = new Database(':memory:');
          
          // Test basic operations
          db.exec(`
            CREATE TABLE test_table (
              id INTEGER PRIMARY KEY,
              name TEXT NOT NULL,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
          `);
          
          const insert = db.prepare('INSERT INTO test_table (name) VALUES (?)');
          const select = db.prepare('SELECT * FROM test_table WHERE name = ?');
          
          insert.run('test-record');
          const result = select.get('test-record');
          
          if (!result || result.name !== 'test-record') {
            throw new Error('Database operation failed');
          }
          
          console.log('Database operations successful');
          db.close();
          EOF
          
          bun run test-db.js

      - name: Report database results
        run: |
          echo "## 🗃️ Database Integration Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ SQLite operations working correctly" >> $GITHUB_STEP_SUMMARY
            echo "✅ Database schema creation successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Database integration issues found" >> $GITHUB_STEP_SUMMARY
          fi

  # Integration test summary
  integration-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [check-prerequisites, changes, contract-tests, api-integration-tests, tutorial-validation, database-integration]
    if: always() && needs.check-prerequisites.outputs.should-run == 'true'
    
    steps:
      - name: Evaluate results
        run: |
          echo "# 🔗 Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check individual job results
          CONTRACT_STATUS="${{ needs.contract-tests.result }}"
          API_STATUS="${{ needs.api-integration-tests.result }}"
          TUTORIAL_STATUS="${{ needs.tutorial-validation.result }}"
          DB_STATUS="${{ needs.database-integration.result }}"
          
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.changes.outputs.contracts }}" = "true" ] || [ "${{ needs.changes.outputs.api }}" = "true" ]; then
            echo "| Contract Tests | $( [ "$CONTRACT_STATUS" = "success" ] && echo "✅ Pass" || echo "❌ Fail" ) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Contract Tests | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.changes.outputs.api }}" = "true" ]; then
            echo "| API Integration | $( [ "$API_STATUS" = "success" ] && echo "✅ Pass" || echo "❌ Fail" ) |" >> $GITHUB_STEP_SUMMARY
            echo "| Database Integration | $( [ "$DB_STATUS" = "success" ] && echo "✅ Pass" || echo "❌ Fail" ) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| API Integration | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
            echo "| Database Integration | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.changes.outputs.tutorials }}" = "true" ] || [ "${{ needs.changes.outputs.api }}" = "true" ]; then
            echo "| Tutorial Validation | $( [ "$TUTORIAL_STATUS" = "success" ] && echo "✅ Pass" || echo "❌ Fail" ) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tutorial Validation | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          FAILED_JOBS=0
          
          if [ "${{ needs.changes.outputs.contracts }}" = "true" ] || [ "${{ needs.changes.outputs.api }}" = "true" ]; then
            [ "$CONTRACT_STATUS" != "success" ] && [ "$CONTRACT_STATUS" != "skipped" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.changes.outputs.api }}" = "true" ]; then
            [ "$API_STATUS" != "success" ] && [ "$API_STATUS" != "skipped" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
            [ "$DB_STATUS" != "success" ] && [ "$DB_STATUS" != "skipped" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ "${{ needs.changes.outputs.tutorials }}" = "true" ] || [ "${{ needs.changes.outputs.api }}" = "true" ]; then
            [ "$TUTORIAL_STATUS" != "success" ] && [ "$TUTORIAL_STATUS" != "skipped" ] && FAILED_JOBS=$((FAILED_JOBS + 1))
          fi
          
          if [ $FAILED_JOBS -eq 0 ]; then
            echo "## ✅ Integration Tests: All Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "Ready for end-to-end testing phase" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Integration Tests: $FAILED_JOBS Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Please fix integration issues before proceeding to E2E testing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi