{
  "version": "v1",
  "kind": "Epic",
  "metadata": {
    "name": "profile-system-demo",
    "description": "Example epic showcasing artifact profile system",
    "createdAt": "2024-01-01T00:00:00Z"
  },
  "spec": {
    "id": "profile-demo-001",
    "title": "Artifact Profile System Demonstration",
    "description": "Demonstrates how to use Arbiter's artifact profile system for libraries, CLIs, and jobs",
    "owners": ["platform-team", "devops"],
    "status": "active",
    "priority": "medium",
    "
": [
      "Showcase library profile with API surface extraction",
      "Demonstrate CLI profile with golden testing",
      "Show job profile with resource validation",
      "Provide examples of profile-specific testing"
    ],
    "generate": [
      {
        "path": "examples/library-project/src/index.ts",
        "mode": "create",
        "template": "// Library example with TypeScript\n\n/**\n * Main library entry point\n */\nexport interface {{.interfaceName}} {\n  name: string;\n  version: string;\n  description?: string;\n}\n\n/**\n * Create a new {{.interfaceName}} instance\n */\nexport function create{{.interfaceName}}(options: Partial<{{.interfaceName}}>): {{.interfaceName}} {\n  return {\n    name: options.name || 'example',\n    version: options.version || '1.0.0',\n    ...options\n  };\n}\n\n/**\n * Validate {{.interfaceName}} instance\n */\nexport function validate(instance: {{.interfaceName}}): boolean {\n  return instance.name.length > 0 && instance.version.match(/^\\d+\\.\\d+\\.\\d+$/) !== null;\n}\n\nexport default {\n  create{{.interfaceName}},\n  validate\n};",
        "data": {
          "interfaceName": "Config"
        },
        "guards": ["// ARBITER:BEGIN CONFIG"]
      },
      {
        "path": "examples/library-project/arbiter.assembly.json", 
        "mode": "create",
        "template": "{\n  \"version\": \"v1\",\n  \"kind\": \"Assembly\",\n  \"metadata\": {\n    \"name\": \"{{.projectName}}\",\n    \"description\": \"Example library project\"\n  },\n  \"spec\": {\n    \"artifact\": {\n      \"kind\": \"library\",\n      \"language\": \"ts\",\n      \"build\": {\n        \"tool\": \"bun\",\n        \"targets\": [\"./src\"]\n      }\n    },\n    \"profiles\": {\n      \"library\": {\n        \"semver\": \"strict\",\n        \"surfaceConfig\": {\n          \"entryPoints\": [\"./src/index.ts\"]\n        }\n      }\n    }\n  }\n}",
        "data": {
          "projectName": "example-library"
        },
        "guards": ["\"kind\": \"Assembly\""]
      },
      {
        "path": "examples/cli-project/cmd/main.go",
        "mode": "create", 
        "template": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"flag\"\n)\n\nconst version = \"{{.version}}\"\n\nfunc main() {\n\tvar showVersion bool\n\tvar verbose bool\n\tvar name string\n\t\n\tflag.BoolVar(&showVersion, \"version\", false, \"Show version\")\n\tflag.BoolVar(&showVersion, \"v\", false, \"Show version (short)\")\n\tflag.BoolVar(&verbose, \"verbose\", false, \"Verbose output\")\n\tflag.StringVar(&name, \"name\", \"\", \"Name for greeting\")\n\t\n\tflag.Parse()\n\t\n\tif showVersion {\n\t\tfmt.Printf(\"{{.appName}} version %s\\n\", version)\n\t\treturn\n\t}\n\t\n\targs := flag.Args()\n\tif len(args) == 0 {\n\t\tflag.Usage()\n\t\tos.Exit(1)\n\t}\n\t\n\tcommand := args[0]\n\tswitch command {\n\tcase \"greet\":\n\t\tif name == \"\" {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: --name is required for greet command\\n\")\n\t\t\tos.Exit(1)\n\t\t}\n\t\tfmt.Printf(\"Hello, %s!\\n\", name)\n\tcase \"status\":\n\t\tfmt.Println(\"{{.appName}} is running\")\n\tdefault:\n\t\tfmt.Fprintf(os.Stderr, \"Unknown command: %s\\n\", command)\n\t\tos.Exit(1)\n\t}\n}",
        "data": {
          "version": "1.0.0",
          "appName": "demo-cli"
        },
        "guards": ["package main"]
      },
      {
        "path": "examples/cli-project/arbiter.assembly.json",
        "mode": "create",
        "template": "{\n  \"version\": \"v1\",\n  \"kind\": \"Assembly\",\n  \"metadata\": {\n    \"name\": \"{{.projectName}}\",\n    \"description\": \"Example CLI project\"\n  },\n  \"spec\": {\n    \"artifact\": {\n      \"kind\": \"cli\",\n      \"language\": \"go\",\n      \"build\": {\n        \"tool\": \"go\",\n        \"targets\": [\"./cmd\"]\n      }\n    },\n    \"profiles\": {\n      \"cli\": {\n        \"tests\": {\n          \"golden\": [\n            {\n              \"name\": \"Version Command\",\n              \"cmd\": \"--version\", \n              \"wantCode\": 0\n            },\n            {\n              \"name\": \"Greet Command\",\n              \"cmd\": \"greet --name World\",\n              \"wantCode\": 0\n            }\n          ]\n        }\n      }\n    }\n  }\n}",
        "data": {
          "projectName": "example-cli"
        },
        "guards": ["\"kind\": \"Assembly\""]
      },
      {
        "path": "examples/job-project/src/main.py",
        "mode": "create",
        "template": "#!/usr/bin/env python3\n\"\"\"\n{{.description}}\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport time\nfrom typing import Dict, Any\n\ndef load_config() -> Dict[str, Any]:\n    \"\"\"Load job configuration from environment\"\"\"\n    return {\n        'input_path': os.environ.get('INPUT_PATH', '/data/input'),\n        'output_path': os.environ.get('OUTPUT_PATH', '/data/output'), \n        'batch_size': int(os.environ.get('BATCH_SIZE', '1000')),\n        'timeout': int(os.environ.get('TIMEOUT', '1800'))\n    }\n\ndef process_batch(data: list, config: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Process a batch of data\"\"\"\n    start_time = time.time()\n    \n    # Simulate processing\n    processed = len(data)\n    \n    return {\n        'processed_records': processed,\n        'processing_time_ms': int((time.time() - start_time) * 1000),\n        'batch_size': config['batch_size']\n    }\n\ndef main():\n    \"\"\"Main job entry point\"\"\"\n    config = load_config()\n    \n    print(f\"Starting {{.jobName}} with config: {json.dumps(config, indent=2)}\")\n    \n    # Simulate data loading and processing\n    fake_data = list(range(config['batch_size']))\n    result = process_batch(fake_data, config)\n    \n    # Output results\n    output = {\n        'status': 'success',\n        'processedRecords': result['processed_records'],\n        'skippedRecords': 0,\n        'errorRecords': 0,\n        'outputLocation': config['output_path'],\n        'metrics': {\n            'processingTimeMs': result['processing_time_ms'],\n            'throughputRecordsPerSec': result['processed_records'] / (result['processing_time_ms'] / 1000) if result['processing_time_ms'] > 0 else 0\n        }\n    }\n    \n    print(json.dumps(output, indent=2))\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())",
        "data": {
          "description": "Example batch processing job",
          "jobName": "demo-job"
        },
        "guards": ["#!/usr/bin/env python3"]
      },
      {
        "path": "examples/job-project/arbiter.assembly.json",
        "mode": "create",
        "template": "{\n  \"version\": \"v1\",\n  \"kind\": \"Assembly\",\n  \"metadata\": {\n    \"name\": \"{{.projectName}}\",\n    \"description\": \"Example job project\"\n  },\n  \"spec\": {\n    \"artifact\": {\n      \"kind\": \"job\",\n      \"language\": \"python\",\n      \"build\": {\n        \"tool\": \"uv\",\n        \"targets\": [\"./src/main.py\"]\n      }\n    },\n    \"profiles\": {\n      \"job\": {\n        \"resources\": {\n          \"limits\": {\n            \"cpu\": \"1000m\",\n            \"memory\": \"2Gi\"\n          }\n        },\n        \"execution\": {\n          \"timeout\": \"1800s\"\n        }\n      }\n    }\n  }\n}",
        "data": {
          "projectName": "example-job"
        },
        "guards": ["\"kind\": \"Assembly\""]
      }
    ],
    "tests": {
      "static": [
        {
          "selector": "examples/*/arbiter.assembly.json",
          "description": "Validate all assembly files"
        }
      ],
      "property": [
        {
          "name": "Library Profile Completeness",
          "cue": "assembly.spec.artifact.kind == \"library\" && assembly.spec.profiles.library != null",
          "description": "Library projects must have library profile configured"
        },
        {
          "name": "CLI Profile Testing",
          "cue": "assembly.spec.artifact.kind == \"cli\" && len(assembly.spec.profiles.cli.tests.golden) > 0",
          "description": "CLI projects must have golden tests"
        },
        {
          "name": "Job Resource Limits", 
          "cue": "assembly.spec.artifact.kind == \"job\" && assembly.spec.profiles.job.resources.limits != null",
          "description": "Job projects must define resource limits"
        }
      ],
      "golden": [
        {
          "input": "examples/library-project/src/index.ts",
          "want": "API surface extracted successfully",
          "description": "Library API surface extraction"
        },
        {
          "input": "examples/cli-project/cmd/main.go", 
          "want": "CLI binary built and tested",
          "description": "CLI golden tests execution"
        }
      ],
      "cli": [
        {
          "cmd": "bun run scan examples/library-project --output-assembly",
          "expectExit": 0,
          "description": "Scan library project and generate assembly"
        },
        {
          "cmd": "bun run scan examples/cli-project --output-assembly",
          "expectExit": 0,
          "description": "Scan CLI project and generate assembly"
        },
        {
          "cmd": "bun run scan examples/job-project --output-assembly", 
          "expectExit": 0,
          "description": "Scan job project and generate assembly"
        }
      ]
    },
    "contracts": {
      "types": [
        "AssemblyV1",
        "EpicV1", 
        "ProfileAdapter",
        "ExecutionPlan",
        "TestVerdict"
      ],
      "invariants": [
        "All profile adapters must implement plan() and test() methods",
        "Execution plans must be deterministic",
        "Test verdicts must include summary metrics"
      ]
    },
    "rollout": {
      "gates": [
        {
          "name": "profile_detection",
          "description": "Artifact profiles are correctly detected"
        },
        {
          "name": "adapter_execution", 
          "description": "Profile adapters execute successfully"
        },
        {
          "name": "test_integration",
          "description": "Profile tests integrate with execute command"
        }
      ],
      "steps": [
        "validate_configurations",
        "test_library_profile", 
        "test_cli_profile",
        "test_job_profile",
        "integration_test"
      ],
      "rollback": {
        "strategy": "immediate",
        "triggers": ["test_failure", "adapter_error"]
      }
    }
  }
}