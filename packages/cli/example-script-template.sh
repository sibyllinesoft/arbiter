#!/bin/bash

# Example script-based template for Arbiter
# This demonstrates how to create a simple template using shell scripts

echo "🔧 Setting up service: $TEMPLATE_SERVICENAME"
echo "📁 Target directory: $TEMPLATE_DESTINATION"
echo "🏷️  Project: $TEMPLATE_PROJECTNAME"

# Create directory structure
mkdir -p "$TEMPLATE_DESTINATION/src"
mkdir -p "$TEMPLATE_DESTINATION/tests"
mkdir -p "$TEMPLATE_DESTINATION/docs"

# Create main service file
cat > "$TEMPLATE_DESTINATION/src/index.ts" << EOF
/**
 * ${TEMPLATE_SERVICENAME} Service
 * Generated by Arbiter Template System
 */

export class ${TEMPLATE_SERVICENAME^}Service {
  constructor() {
    console.log('${TEMPLATE_SERVICENAME^} service initialized');
  }

  async start(): Promise<void> {
    console.log('Starting ${TEMPLATE_SERVICENAME} service...');
    // Add your service logic here
  }

  async stop(): Promise<void> {
    console.log('Stopping ${TEMPLATE_SERVICENAME} service...');
    // Add cleanup logic here
  }
}

export default ${TEMPLATE_SERVICENAME^}Service;
EOF

# Create package.json
cat > "$TEMPLATE_DESTINATION/package.json" << EOF
{
  "name": "${TEMPLATE_PROJECTNAME,,}-${TEMPLATE_SERVICENAME}",
  "version": "1.0.0",
  "description": "${TEMPLATE_SERVICENAME^} service for ${TEMPLATE_PROJECTNAME}",
  "main": "src/index.ts",
  "scripts": {
    "dev": "tsx watch src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "test": "jest"
  },
  "dependencies": {
    "tsx": "^4.0.0"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/node": "^20.0.0",
    "jest": "^29.0.0"
  }
}
EOF

# Create TypeScript config
cat > "$TEMPLATE_DESTINATION/tsconfig.json" << EOF
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "tests"]
}
EOF

# Create test file
cat > "$TEMPLATE_DESTINATION/tests/${TEMPLATE_SERVICENAME}.test.ts" << EOF
import ${TEMPLATE_SERVICENAME^}Service from '../src/index';

describe('${TEMPLATE_SERVICENAME^}Service', () => {
  let service: ${TEMPLATE_SERVICENAME^}Service;

  beforeEach(() => {
    service = new ${TEMPLATE_SERVICENAME^}Service();
  });

  it('should initialize correctly', () => {
    expect(service).toBeInstanceOf(${TEMPLATE_SERVICENAME^}Service);
  });

  it('should start without errors', async () => {
    await expect(service.start()).resolves.not.toThrow();
  });

  it('should stop without errors', async () => {
    await expect(service.stop()).resolves.not.toThrow();
  });
});
EOF

# Create README
cat > "$TEMPLATE_DESTINATION/README.md" << EOF
# ${TEMPLATE_SERVICENAME^} Service

Generated by Arbiter Template System for the **${TEMPLATE_PROJECTNAME}** project.

## Description

This is the ${TEMPLATE_SERVICENAME} service, part of the ${TEMPLATE_PROJECTNAME} application.

## Development

\`\`\`bash
# Install dependencies
npm install

# Start development server
npm run dev

# Run tests
npm test

# Build for production
npm run build

# Start production server
npm start
\`\`\`

## Configuration

The service can be configured through environment variables or configuration files.

## API

Document your API endpoints here.

## Testing

Run the test suite with:

\`\`\`bash
npm test
\`\`\`

## Deployment

This service is configured to be deployed via Arbiter's deployment system.
EOF

echo "✅ Template applied successfully to $TEMPLATE_DESTINATION"
echo "📝 Files created:"
echo "   - src/index.ts"
echo "   - package.json"
echo "   - tsconfig.json"
echo "   - tests/${TEMPLATE_SERVICENAME}.test.ts"
echo "   - README.md"

echo ""
echo "🚀 Next steps:"
echo "   1. cd $TEMPLATE_DESTINATION"
echo "   2. npm install"
echo "   3. npm run dev"